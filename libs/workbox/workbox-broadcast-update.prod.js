this.workbox=this.workbox||{},this.workbox.broadcastUpdate=function(e,t,s,a){"use strict";try{self["workbox:broadcast-update:7.2.0"]&&_()}catch(e){}const o=(e,t,s)=>!s.some((s=>e.headers.has(s)&&t.headers.has(s)))||s.every((s=>{const a=e.headers.has(s)===t.headers.has(s),o=e.headers.get(s)===t.headers.get(s);return a&&o})),n=["content-length","etag","last-modified"],r=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);function i(e){return{cacheName:e.cacheName,updatedURL:e.request.url}}class c{constructor({generatePayload:e,headersToCheck:t,notifyAllClients:s}={}){this.C=t||n,this.A=e||i,this.U=null==s||s}async notifyIfUpdated(e){if(e.oldResponse&&!o(e.oldResponse,e.newResponse,this.C)){const a={type:"CACHE_UPDATED",meta:"workbox-broadcast-update",payload:this.A(e)};if("navigate"===e.request.mode){let a;e.event instanceof FetchEvent&&(a=e.event.resultingClientId);await s.resultingClientExists(a)&&!r||await t.timeout(3500)}if(this.U){const e=await self.clients.matchAll({type:"window"});for(const t of e)t.postMessage(a)}else if(e.event instanceof FetchEvent){const t=await self.clients.get(e.event.clientId);null==t||t.postMessage(a)}}}}return e.BroadcastCacheUpdate=c,e.BroadcastUpdatePlugin=class{constructor(e){this.cacheDidUpdate=async e=>{a.dontWaitFor(this.F.notifyIfUpdated(e))},this.F=new c(e)}},e.responsesAreSame=o,e}({},workbox.core._private,workbox.core._private,workbox.core._private);